// Code generated by Prisma (prisma@1.17.0-beta.24). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  investment: (where?: InvestmentWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  investment: (where: InvestmentWhereUniqueInput) => Investment;
  investments: (
    args?: {
      where?: InvestmentWhereInput;
      orderBy?: InvestmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<InvestmentNode>>;
  investmentsConnection: (
    args?: {
      where?: InvestmentWhereInput;
      orderBy?: InvestmentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => InvestmentConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createInvestment: (data: InvestmentCreateInput) => Investment;
  updateInvestment: (
    args: { data: InvestmentUpdateInput; where: InvestmentWhereUniqueInput }
  ) => Investment;
  updateManyInvestments: (
    args: { data: InvestmentUpdateInput; where?: InvestmentWhereInput }
  ) => BatchPayload;
  upsertInvestment: (
    args: {
      where: InvestmentWhereUniqueInput;
      create: InvestmentCreateInput;
      update: InvestmentUpdateInput;
    }
  ) => Investment;
  deleteInvestment: (where: InvestmentWhereUniqueInput) => Investment;
  deleteManyInvestments: (where?: InvestmentWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  investment: (
    where?: InvestmentSubscriptionWhereInput
  ) => InvestmentSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type InvestmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "price_ASC"
  | "price_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface InvestmentCreateInput {
  address: String;
  price?: Float;
}

export interface InvestmentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  AND?: InvestmentWhereInput[] | InvestmentWhereInput;
  OR?: InvestmentWhereInput[] | InvestmentWhereInput;
  NOT?: InvestmentWhereInput[] | InvestmentWhereInput;
}

export interface InvestmentUpdateInput {
  address?: String;
  price?: Float;
}

export interface InvestmentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: InvestmentWhereInput;
  AND?: InvestmentSubscriptionWhereInput[] | InvestmentSubscriptionWhereInput;
  OR?: InvestmentSubscriptionWhereInput[] | InvestmentSubscriptionWhereInput;
  NOT?: InvestmentSubscriptionWhereInput[] | InvestmentSubscriptionWhereInput;
}

export type InvestmentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface InvestmentEdgeNode {
  cursor: String;
}

export interface InvestmentEdge
  extends Promise<InvestmentEdgeNode>,
    Fragmentable {
  node: <T = Investment>() => T;
  cursor: () => Promise<String>;
}

export interface InvestmentEdgeSubscription
  extends Promise<AsyncIterator<InvestmentEdgeNode>>,
    Fragmentable {
  node: <T = InvestmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface InvestmentPreviousValuesNode {
  id: ID_Output;
  address: String;
  price?: Float;
}

export interface InvestmentPreviousValues
  extends Promise<InvestmentPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  price: () => Promise<Float>;
}

export interface InvestmentPreviousValuesSubscription
  extends Promise<AsyncIterator<InvestmentPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInvestmentNode {
  count: Int;
}

export interface AggregateInvestment
  extends Promise<AggregateInvestmentNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInvestmentSubscription
  extends Promise<AsyncIterator<AggregateInvestmentNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InvestmentNode {
  id: ID_Output;
  address: String;
  price?: Float;
}

export interface Investment extends Promise<InvestmentNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  price: () => Promise<Float>;
}

export interface InvestmentSubscription
  extends Promise<AsyncIterator<InvestmentNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface InvestmentSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface InvestmentSubscriptionPayload
  extends Promise<InvestmentSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Investment>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InvestmentPreviousValues>() => T;
}

export interface InvestmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InvestmentSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InvestmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InvestmentPreviousValuesSubscription>() => T;
}

export interface InvestmentConnectionNode {}

export interface InvestmentConnection
  extends Promise<InvestmentConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<InvestmentEdgeNode>>>() => T;
  aggregate: <T = AggregateInvestment>() => T;
}

export interface InvestmentConnectionSubscription
  extends Promise<AsyncIterator<InvestmentConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<InvestmentEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateInvestmentSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
