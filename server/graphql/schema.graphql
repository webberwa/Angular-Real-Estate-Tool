# import UserWhereUniqueInput from 'prisma/__generated__/prisma.graphql'
# import UserUpdateInput from 'prisma/__generated__/prisma.graphql'
# import UserWhereUniqueInput from 'prisma/__generated__/prisma.graphql'

# import InvestmentCreateInput from 'prisma/__generated__/prisma.graphql'
# import InvestmentWhereUniqueInput from 'prisma/__generated__/prisma.graphql'

# import ReviewWhereUniqueInput from 'prisma/__generated__/prisma.graphql'
# import ReviewWhereInput from 'prisma/__generated__/prisma.graphql'

# import ProviderWhereInput from 'prisma/__generated__/prisma.graphql'
# import ProviderWhereUniqueInput from 'prisma/__generated__/prisma.graphql'

# import InvestmentWhereUniqueInput from 'prisma/__generated__/prisma.graphql'
# import InvestmentUpdateInput from 'prisma/__generated__/prisma.graphql'

type Query {
  investments: [Investment!]!
  getInvestment(where: InvestmentWhereUniqueInput): Investment!
  user(where: UserWhereUniqueInput): User
  me: User
  providers(where: ProviderWhereInput, skip: Int, first: Int): ProviderFeed
  provider(where: ProviderWhereUniqueInput): Provider!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput): [Review!]!
  expenses: [Expense!]!
}

type ProviderFeed {
  data: [Provider]!
  count: Int!
}

type Mutation {
  # User
  createUser(
    email: String!
    password: String!
    firstname: String
    lastname: String
  ): AuthPayload
  loginUser(email: String!, password: String!, code: String): AuthPayload
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  requestResetPassword(email: String!): Boolean
  resetPassword(password: String!, token: String!): Boolean
  verify2faCode(code: String!): Boolean # Verify for the 1st time
  # Investment
  addInvestment(data: InvestmentCreateInput!): Investment!
  deleteInvestment(where: InvestmentWhereUniqueInput!): Investment!
  updateInvestment(
    data: InvestmentUpdateInput!
    where: InvestmentWhereUniqueInput!
  ): Investment!
  # Provider
  addProvider(data: ProviderCreateInput!): Provider!
  deleteProvider(where: ProviderWhereUniqueInput!): Provider
  updateProvider(
    data: ProviderUpdateInput!
    where: ProviderWhereUniqueInput!
  ): Provider!
  generateQRCode: String!
  # Review
  addReview(data: ReviewCreateInput!): Review!
  # Expense
  addExpense(data: ExpenseCreateInput!): Expense!
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense!

  test: Boolean
}

type Expense {
  id: ID!
  title: String!
  description: String!
  price: Float
  investment: Investment!
  date: String!
}

type Review {
  id: ID!
  rating: Int
  text: String
  date: String!
  provider: Provider
}

type ProviderStats {
  review_count: Int
  review_avg: Float
}

type Investment {
  id: ID!
  address: String!
  price: Float
  monthly_rent: Float
  mortgage_amount: Float
  mortgage_downpayment: Float
  mortgage_interest_rate: Float
  mortgage_period: Float
  expenses: [Expense!]
  purchase_date: String
}

type User {
  id: ID!
  firstname: String
  lastname: String
  email: String!
  password: String!
  has_two_factor: Boolean!
  is_admin: Boolean!
}

# import Provider from 'prisma/__generated__/prisma.graphql'
type Provider {
  id: ID!
  name: String!
  type: String!
  provider_stats: ProviderStats
  reviews(
    where: ReviewWhereInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Review!]
  phone_number: String
  email: String
  is_verified: Boolean!
  owner: User
  street: String
  city: String
  state: String
  zip: String
  long: Float
  lat: Float
}

type AuthPayload {
  token: String!
  user: User!
}
