# import UserWhereUniqueInput from 'prisma/__generated__/prisma.graphql'
# import UserUpdateInput from 'prisma/__generated__/prisma.graphql'
# import UserWhereUniqueInput from 'prisma/__generated__/prisma.graphql'

# import InvestmentCreateInput from 'prisma/__generated__/prisma.graphql'
# import InvestmentWhereUniqueInput from 'prisma/__generated__/prisma.graphql'

# import ReviewWhereUniqueInput from 'prisma/__generated__/prisma.graphql'
# import ReviewWhereInput from 'prisma/__generated__/prisma.graphql'

# import ProviderWhereInput from 'prisma/__generated__/prisma.graphql'
# import ProviderWhereUniqueInput from 'prisma/__generated__/prisma.graphql'

type Query {
  investments: [Investment!]!
  user(where: UserWhereUniqueInput): User
  me: User
  providers(where: ProviderWhereInput): [Provider!]!
  provider(where: ProviderWhereUniqueInput): Provider!
  reviews(where: ReviewWhereInput): [Review!]!
}

type Mutation {
  addInvestment(data: InvestmentCreateInput!): Investment!
  deleteInvestment(where: InvestmentWhereUniqueInput!): Investment!
  createUser(email: String!, password: String!): AuthPayload
  loginUser(email: String!, password: String!, code: String): AuthPayload
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  addProvider(data: ProviderCreateInput!): Provider!
  requestResetPassword(email: String!): Boolean
  resetPassword(password: String!, token: String!): Boolean
  generateQRCode: String!
  # Verify for the 1st time
  verify2faCode(code: String!): Boolean
  test: Boolean
}

type Review {
  id: ID!
  rating: Int
  text: String
  provider: Provider
}

type Investment {
  id: ID!
  address: String!
  price: Float
  monthly_rent: Float
  mortgage_amount: Float
  mortgage_downpayment: Float
  mortgage_interest_rate: Float
  mortgage_period: Float
}

type User {
  id: ID!
  email: String!
  password: String!
  has_two_factor: Boolean!
}

# import Provider from 'prisma/__generated__/prisma.graphql'

type AuthPayload {
  token: String!
  user: User!
}
